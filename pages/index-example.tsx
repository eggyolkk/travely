'use client'
import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { useEffect, useState } from 'react'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { createClient } from '@supabase/supabase-js';
import Router from 'next/router';

const inter = Inter({ subsets: ['latin'] })
export const revalidate = 0;

export default function Login() {
  const supabase = createClientComponentClient()
  const [users, setUsers] = useState<any>([]);
  const [myName, setMyName] = useState('');
  const [email, setEmail] = useState<string>('')
  const [password, setPassword] = useState<string>('')

  const handleInput = (event: any) => {
    setMyName(event.target.value);
  }

  const handlePassword = (event: any) => {
    setPassword(event.target.value);
  }

  const handleEmail = (event: any) => {
    setEmail(event.target.value);
  }

  const handleSignIn = async() => {
    const { data, error } = await supabase.auth.signInWithPassword({
      email: email,
      password: password,
    })

    if (data) {
      Router.replace('/home');
    }
  } 

  const handleSignUp = async() => {
    const supbase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
    );

    const {data, error} = await supbase.auth.signUp({
      email: email,
      password: password,
      options: {
       emailRedirectTo: `${location.origin}/home`,
       },
    });

    if (data.user) {
      const { data: signInData, error } = await supabase.auth.signInWithPassword({
        email: email,
        password: password,
      })

      if (signInData) {
        Router.replace('/home');
      }
    }
  }

  const handleSubmit = async() => {
    const { data, error } = await supabase
    .from('users')
    .insert([
      { name: myName },
    ])
    .select();
  }
  
  useEffect(() => {
    const getInitialData = async () => {
        let { data: initialUsers, error } = await supabase
        .from('users')
        .select('name')

        if (initialUsers) {
          setUsers(initialUsers);
        }
    }

    const getData = async () => {
      const users = supabase.channel('custom-all-channel')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'users' },
        (payload) => {
          setUsers((users: any) => [...users, payload.new])
        }
      )
      .subscribe()
    }

    getInitialData();
    getData();

    // If user is authenticated, redirect to home page
    const getSession = async() => {
      const { data, error } = await supabase.auth.getSession();

      // Unauthenticated
      if (data.session) {
        Router.replace('/home');
      }

      console.log('session', data)
  }

  getSession();
  }, [])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main >
        <div>
          <p>
            Get started by editing&nbsp;
            <code>pages/index.tsx</code>
          </p>
          <div>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              By{' '}
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                width={100}
                height={24}
                priority
              />
            </a>
          </div>
        </div>

        <div>
          <h1>Hello</h1>
          <h2>Users:</h2>
          {users.map((user: any, i: number) => {
            return (
              <li key={i}>{user.name}</li>
            )
          })}
          <input value={myName} onChange={handleInput} placeholder="name"/>
          <input type='submit' onClick={handleSubmit} />

          <h3>Sign in:</h3>
          <input value={email} onChange={handleEmail} placeholder="email" />
          <input value={password} onChange={handlePassword} placeholder="password" />
          <input type='submit' onClick={handleSignIn} />
          <button onClick={handleSignUp}>Sign up</button>
        </div>
      </main>
    </>
  )
}
